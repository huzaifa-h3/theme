{% comment %} Mobile filter sidebar for Shopify theme {% endcomment %}
<div class="filters-overlay"></div>
<div class="filters">
  <div class="filters-header">
    <h4>Filters</h4>
    <button class="filters-close" aria-label="Close filters">
      <img src="{{ 'icon-cross.svg' | asset_url }}" height="12" width="12" alt="Close">
    </button>
  </div>
  <form id="CollectionFiltersFormMobile">
    {% for filter in collection.filters %}
      <div class="filter-box-mobile">
        {% if filter.type == 'price_range' %}
          <details>
            <summary aria-label="{{ filter.label | escape }}">Price</summary>
            <div class="filter-underlist-mobile price-range-mobile" role="region" aria-label="{{ filter.label | escape }}">
              <div class="price-inputs-mobile">
                <div class="price-group-mobile">
                  <input
                    type="number"
                    name="{{ filter.min_value.param_name }}"
                    id="mobile-price-min"
                    class="price-input-mobile"
                    {% if filter.min_value.value %}
                      value="{{ filter.min_value.value | money_without_currency | replace: ',', '' }}"
                    {% endif %}
                    placeholder="0"
                    min="0"
                    max="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
                  >
                  <label for="mobile-price-min" class="price-label-mobile">Min</label>
                </div>
                <div class="price-group-mobile">
                  <input
                    type="number"
                    name="{{ filter.max_value.param_name }}"
                    id="mobile-price-max"
                    class="price-input-mobile"
                    {% if filter.max_value.value %}
                      value="{{ filter.max_value.value | money_without_currency | replace: ',', '' }}"
                    {% endif %}
                    placeholder="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
                    min="0"
                    max="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
                  >
                  <label for="mobile-price-max" class="price-label-mobile">Max</label>
                </div>
              </div>
            </div>
          </details>
          {% if filter.min_value.value or filter.max_value.value %}
            <button class="clearFilter-mobile" type="button" aria-label="Clear price filter">
              Clear <img src="{{ 'icon-cross.svg' | asset_url }}" height="12" width="12" alt="Clear">
            </button>
          {% endif %}
        {% else %}
          <details>
            <summary aria-label="{{ filter.label | escape }}">{{ filter.label }}</summary>
            <ul class="filter-underlist-mobile" role="listbox" aria-label="{{ filter.label | escape }}">
              {% for value in filter.values %}
                <li class="filter-mobile">
                  <input
                    type="checkbox"
                    name="{{ filter.param_name }}"
                    value="{{ value.value }}"
                    id="mobile-{{ filter.param_name }}-{{ forloop.index }}"
                    {% if value.active %}checked{% endif %}
                    {% if value.count == 0 and value.active == false %}disabled{% endif %}
                  >
                  <span class="filter-checkbox">
                    {% if value.active %}
                      <img src="{{ 'icon-check.svg' | asset_url }}" height="12" width="12" alt="Selected">
                    {% endif %}
                  </span>
                  <label for="mobile-{{ filter.param_name }}-{{ forloop.index }}">{{ value.label | escape }} <span class="filter-count">({{ value.count }})</span></label>
                </li>
              {% endfor %}
            </ul>
          </details>
          {% if filter.active_values.size > 0 %}
            <button class="clearFilter-mobile" type="button" aria-label="Clear {{ filter.label | escape }} filter">
              Clear <img src="{{ 'icon-cross.svg' | asset_url }}" height="12" width="12" alt="Clear">
            </button>
          {% endif %}
        {% endif %}
      </div>
    {% endfor %}
  </form>
</div>

<style>
  .filters {
    max-width: var(--sidebar-width, 300px);
    width: 100%;
    height: 100%;
    position: fixed;
    top: 0;
    right: 0;
    transform: translateX(100%);
    transition: transform 0.5s ease-in-out;
    z-index: 9999;
    background-color: #fff;
    display: flex;
    flex-direction: column;
    padding: 15px 25px;
    overflow-y: auto;
    box-shadow: -2px 0 5px rgba(0, 0, 0, 0.1);
  }
  .filters.open {
    transform: translateX(0);
  }
  .filters.close {
    transform: translateX(100%);
  }
  .filters-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(4px);
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
    z-index: 9998;
  }
  .filters-overlay.active {
    opacity: 1;
    pointer-events: auto;
  }
  .filters-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    border-bottom: 1px solid #e0e0e0;
    padding-bottom: 10px;
  }
  .filters-header h4 {
    margin: 0;
    font-size: var(--font-size-md, 18px);
    font-weight: 600;
    color: #333;
  }
  .filters-close {
    background: none;
    border: none;
    cursor: pointer;
    padding: 5px;
  }
  .filter-box-mobile {
    margin-bottom: 20px;
  }
  .filter-box-mobile details {
    font-size: var(--font-size-xs, 14px);
  }
  .filter-box-mobile details summary {
    padding: 1px;
    border-radius: 5px 5px 0 0;
    cursor: pointer;
    list-style: none;
    font-weight: 500;
    color: #333;
  }
  .filter-underlist-mobile {
    padding: 10px;
    border-radius: 0 0 5px 5px;
    margin-top: -1px;
    list-style: none;
  }
  .price-range-mobile {
    padding: 10px;
    background: #fafafa;
    border-radius: 0 0 5px 5px;
    margin-top: -1px;
  }
  .price-inputs-mobile {
    display: flex;
    gap: 10px;
  }
  .price-group-mobile {
    flex: 1;
    position: relative;
  }
  .price-input-mobile {
    width: 100%;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 14px;
    box-sizing: border-box;
  }
  .price-label-mobile {
    display: block;
    font-size: 12px;
    color: #666;
    margin-top: 5px;
    text-align: center;
  }
  .filter-mobile {
    display: flex;
    align-items: center;
    padding: 8px 0;
    position: relative;
  }
  .filter-mobile input[type="checkbox"] {
    position: absolute;
    opacity: 0;
  }
  .filter-checkbox {
    width: 15px;
    height: 15px;
    border: 1px solid #ccc;
    border-radius: 3px;
    margin-right: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: border-color 0.2s;
  }
  .filter-mobile input[type="checkbox"]:checked + .filter-checkbox {
    border-color: #000;
    background: #000;
  }
  .filter-mobile input[type="checkbox"]:checked + .filter-checkbox img {
    display: block;
  }
  .filter-checkbox img {
    display: none;
    width: 12px;
    height: 12px;
  }
  .filter-mobile label {
    margin-left: 5px;
    width: 100%;
    cursor: pointer;
    color: #444;
    font-size: 14px;
  }
  .filter-count {
    color: #666;
    font-size: 12px;
  }
  .clearFilter-mobile {
    display: flex;
    align-items: center;
    gap: 5px;
    font-size: var(--font-size-xs, 14px);
    border: none;
    padding: 5px 10px;
    background: none;
    cursor: pointer;
    margin-top: 10px;
    color: #007bff;
    transition: color 0.2s;
  }
  .clearFilter-mobile:hover {
    color: #0056b3;
  }
  .clearFilter-mobile img {
    border: 1px solid;
    border-radius: 50%;
  }
  .filters-actions {
    display: flex;
    gap: 10px;
    margin-top: auto;
    padding-top: 20px;
    border-top: 1px solid #e0e0e0;
    position: sticky;
    bottom: 0;
    background: #fff;
    padding-bottom: 15px;
  }
  .apply-filter-btn {
    flex: 1;
    padding: 10px;
    background-color: #000;
    color: #fff;
    border: none;
    border-radius: 5px;
    font-size: var(--font-size-xs, 14px);
    cursor: pointer;
    transition: background-color 0.2s;
  }
  .apply-filter-btn:hover {
    background-color: #333;
  }
  .clear-all-btn {
    flex: 1;
    padding: 10px;
    background-color: #fff;
    color: #000;
    border: 1px solid #e0e0e0;
    border-radius: 5px;
    font-size: var(--font-size-xs, 14px);
    cursor: pointer;
    transition: border-color 0.2s, color 0.2s;
  }
  .clear-all-btn:hover {
    border-color: #007bff;
    color: #007bff;
  }
  @media (min-width: 768px) {
    .filters {
      display: none;
    }
    .filters-overlay{
      display: none;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const filterSidebar = document.querySelector('.filters');
    const filtersOverlay = document.querySelector('.filters-overlay');
    const filterButton = document.querySelector('.filter-sidebar-trigger');
    const closeButton = document.querySelector('.filters-close');
    const mobileForm = document.querySelector('#CollectionFiltersFormMobile');

    const openFilters = () => {
      filterSidebar.classList.add('open');
      filterSidebar.classList.remove('close');
      filtersOverlay.classList.add('active');
    };

    const closeFilters = () => {
      filterSidebar.classList.add('close');
      filterSidebar.classList.remove('open');
      filtersOverlay.classList.remove('active');
    };

    // Debounce function to prevent rapid filter updates
    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func(...args), wait);
      };
    }

    // Apply filters with existing params preserved
    const applyFilters = () => {
      const formData = new FormData(mobileForm);
      const url = new URL(window.location.href);
      const params = new URLSearchParams(url.search);

      // Preserve existing params and update filters/sort
      params.forEach((value, key) => {
        if (!formData.has(key)) {
          params.delete(key);
        }
      });
      for (const [key, value] of formData) {
        if (params.has(key)) {
          const existing = params.get(key).split(',').filter(v => v !== value);
          params.set(key, [...existing, value].join(','));
        } else {
          params.set(key, value);
        }
      }

      url.search = params.toString();
      window.location.href = url.toString();
    };

    const debouncedApplyFilters = debounce(applyFilters, 300);

    // Event listeners
    if (filterButton) filterButton.addEventListener('click', openFilters);
    closeButton.addEventListener('click', closeFilters);
    filtersOverlay.addEventListener('click', closeFilters);
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && filterSidebar.classList.contains('open')) {
        closeFilters();
      }
    });

    // Handle filter changes (debounced)
    mobileForm.addEventListener('change', debouncedApplyFilters);

    // Clear individual filter
    document.querySelectorAll('.clearFilter-mobile').forEach(button => {
      button.addEventListener('click', () => {
        const filterBox = button.closest('.filter-box-mobile');
        if (filterBox.querySelector('.price-range-mobile')) {
          filterBox.querySelectorAll('.price-input-mobile').forEach(input => {
            input.value = '';
          });
        } else {
          const inputs = filterBox.querySelectorAll('input[type="checkbox"]');
          inputs.forEach(input => input.checked = false);
        }
        applyFilters();
      });
    });

    // Clear all filters
    document.querySelector('.clear-all-btn').addEventListener('click', () => {
      mobileForm.querySelectorAll('input[type="checkbox"], input[type="radio"], .price-input-mobile').forEach(input => {
        if (input.type === 'checkbox' || input.type === 'radio') {
          input.checked = false;
        } else {
          input.value = '';
        }
      });
      applyFilters();
    });

    // Apply filter button
    document.querySelector('.apply-filter-btn').addEventListener('click', applyFilters);
  });
</script>