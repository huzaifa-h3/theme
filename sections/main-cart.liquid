{{ 'main-cart.css' | asset_url | stylesheet_tag }}

<div class="cart">
  <span style="font-size: 25px;">Cart</span>
  <div
    class="cart-wrapper"
    {% if cart.item_count == 0 %}
      style="display: none;"
    {% endif %}
  >
    <div class="cart-items">
      <table style="width: 100%; border-collapse: collapse; text-align: left;">
        <thead style="border-bottom: 1px solid lightgrey;">
          <tr style="padding-bottom: 5px;">
            <th colspan="1" scope="col">Product</th>
            <th colspan="1" scope="col">Quantity</th>
            <th colspan="1" scope="col">Total</th>
          </tr>
        </thead>
        <tbody>
          {% for item in cart.items %}
            <thead class="spacer">
              <tr>
                <th></th>
              </tr>
            </thead>
            <tr valign="top" data-item-key="{{ item.key }}">
              <td class="items-info">
                <a href="{{ item.url }}">
                  <img
                    src="{{ item.image | image_url: width: 150 }}"
                    width="150"
                    height="200"
                    alt="{{ item.title | escape }}"
                  >
                  <div class="item-info">
                    <h6>{{ item.title | escape }}</h6>
                    <p>{{ item.price | money_with_currency }}</p>
                    <div>
                      {% for option in item.options_with_values %}
                        <p class="item-option">
                          <span class="option-title">{{ option.name }}:</span>
                          <span class="option-value">{{ option.value }}</span>
                        </p>
                      {% endfor %}
                    </div>
                  </div>
                </a>
              </td>
              <td class="item-quantity">
                <div class="quantity-selector">
                  <button type="button" class="quantity-btn quantity-btn--minus">âˆ’</button>
                  <input
                    type="number"
                    class="quantity-input"
                    data-item-id="{{ item.variant_id }}"
                    value="{{ item.quantity }}"
                    min="1"
                    max="99"
                  >
                  <button type="button" class="quantity-btn quantity-btn--plus">+</button>
                </div>

                <button class="delete-from-cart" onclick="removeItem('{{ item.key }}')" data-item-key="{{ item.key }}">
                  <img src="{{ 'icon-trash.svg' | asset_url }}" height="20" width="20" alt="Remove item">
                </button>
              </td>
              <td class="items-total">
                <p class="item-total">{{ item.line_price | money_with_currency }}</p>
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
    <div class="cart-total">
      <div class="subtotal-wrapper">
        <h6 class="total">
          <strong style="padding-right: 5px;">Subtotal</strong>
          <span class="subtotal">{{ cart.items_subtotal_price | money_with_currency }}</span>
        </h6>
      </div>
      <div class="quick_action-btns">
        <a href="/checkout" class="btn-primary">Checkout</a>
        <a href="{{ routes.all_products_collection_url }}" class="btn-secondary">Continue Shopping</a>
      </div>
    </div>
  </div>
  <div
    class="empty-cart"
    {% if cart.item_count > 0 %}
      style="display: none;"
    {% endif %}
  >
    <h6>Empty Cart</h6>
    <a class="btn-primary" href="{{ routes.all_products_collection_url }}">Shop Now</a>
  </div>
</div>

<script>
  // Fallback for money formatting if Shopify.formatMoney is unavailable
  function formatMoney(cents, format = '{{ shop.money_with_currency_format }}') {
    if (typeof Shopify !== 'undefined' && Shopify.formatMoney) {
      return Shopify.formatMoney(cents, format);
    }
    const dollars = (cents / 100).toFixed(2);
    return `Rs. ${dollars}`;
  }

  function updateCartState(cart) {
    console.log('Updating cart state:', cart);
    const emptyCart = document.querySelector('.empty-cart');
    const cartWrapper = document.querySelector('.cart-wrapper');
    const subtotalEl = document.querySelector('.subtotal');

    // Update subtotal
    if (subtotalEl) {
      subtotalEl.textContent = formatMoney(cart.items_subtotal_price);
    }

    // Toggle cart visibility
    if (cart.item_count === 0) {
      cartWrapper.style.display = 'none';
      emptyCart.style.display = 'block';
    } else {
      cartWrapper.style.display = 'block';
      emptyCart.style.display = 'none';
    }
  }

  async function updateQuantity(itemKey, change = 0, directValue = null) {
    console.log('Updating quantity for item:', { itemKey, change, directValue });

    // Find the input element
    const input = document.querySelector(`input[data-item-key="${itemKey}"]`);
    if (!input) {
      console.error('Quantity input not found for item:', itemKey);
      alert('Error: Could not find item quantity input.');
      return;
    }

    // Calculate new quantity
    let newQuantity;
    if (directValue !== null) {
      newQuantity = parseInt(directValue, 10);
      if (isNaN(newQuantity)) {
        console.error('Invalid direct quantity:', directValue);
        alert('Please enter a valid number.');
        input.value = input.value || 1; // Revert to previous valid value
        return;
      }
    } else {
      newQuantity = parseInt(input.value, 10) + change;
    }

    // Respect min/max constraints
    newQuantity = Math.max(1, Math.min(99, newQuantity));
    input.value = newQuantity;

    try {
      const response = await fetch('/cart/change.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
        },
        body: JSON.stringify({
          id: itemKey,
          quantity: newQuantity,
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP error ${response.status}: ${errorText}`);
      }

      const cart = await response.json();
      console.log('Cart updated:', cart);

      // Update line total for this item
      const rowTotal = document.querySelector(`tr[data-item-key="${itemKey}"] .item-total`);
      if (rowTotal) {
        const updatedItem = cart.items.find((i) => i.key === itemKey);
        if (updatedItem) {
          rowTotal.textContent = formatMoney(updatedItem.line_price);
        } else {
          console.warn('Item not found in updated cart:', itemKey);
          // Remove row if item no longer exists (e.g., quantity set to 0)
          const itemRow = document.querySelector(`tr[data-item-key="${itemKey}"]`);
          if (itemRow) itemRow.remove();
        }
      }

      // Update cart state
      updateCartState(cart);
    } catch (error) {
      console.error('Error updating quantity:', error);
      alert('Failed to update quantity. Please try again.');
      input.value = parseInt(input.value, 10) - change || 1; // Revert on error
    }
  }

  async function removeItem(itemKey) {
    console.log('Removing item:', itemKey);
    try {
      const response = await fetch('/cart/change.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
        },
        body: JSON.stringify({
          id: itemKey,
          quantity: 0, // Remove item
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP error ${response.status}: ${errorText}`);
      }

      const cart = await response.json();
      console.log('Cart after removal:', cart);

      // Remove the item row from the DOM
      const itemRow = document.querySelector(`tr[data-item-key="${itemKey}"]`);
      if (itemRow) {
        itemRow.remove();
      }

      // Update cart state
      updateCartState(cart);
    } catch (error) {
      console.error('Error removing item:', error);
      alert('Failed to remove item. Please try again.');
    }
  }
</script>
